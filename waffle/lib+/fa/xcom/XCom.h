#pragma once

// ** header file generated by dumpcpp from type library
// ** C:\Program Files (x86)\IT Innovation\XCom v2.x\SE\Bin\eXCom.ocx
#include "excomlib.h"
#include <QVector>

class WDispatchDriver;

// Signal 연결.
// connect(m_xcom, SIGNAL(SecsEvent(int,int)), SLOT(onSecsEvent(int,int)));
// connect(m_xcom, SIGNAL(SecsMsg()), SLOT(onSecsMsg()));
// connect(m_xcom, SIGNAL(signal(QString,int,void*)), SLOT(onSignal(QString,int,void*)));
class XCom : public EXCOMLib::eXCom
{
public:
	enum {
		// XCom 에서 사용하는 SECS item format 값은 SEMI 에서 규정한
		// SECS item format 과 동일합니다.
		ListFormat = 0,
		BinaryFormat = 8,
		BooleanFormat = 9,
		AsciiFormat = 16,
		JisFormat = 17,
		I1Format = 25,
		I2Format = 26,
		I4Format = 28,
		I8Format = 24,
		U1Format = 41,
		U2Format = 42,
		U4Format = 44,
		U8Format = 40,
		F4Format = 36,
		F8Format = 32,
		NoItemExists = 63, // Item이 존재하지 않음.
	};
	XCom(QWidget *parent = 0, Qt::WindowFlags f = 0);
	virtual ~XCom();

#define DECL_FUNC(NAME, TYPE)											\
	TYPE NAME(int msgId, short* check = 0);								\
	QVector<TYPE> NAME##Array(int msgId, short* check = 0);				\
	short NAME##Array(int msgId, QVector<TYPE>& dataList);				\
	short NAME##Array(int msgId, TYPE* dataList, int dataListSize,int* dataCount); \
	short Set##NAME##Array(int msgId, const QVector<TYPE>& dataList);	\
	short Set##NAME##Array(int msgId, TYPE* dataList, int count);		\
	short Set##NAME(int msgId, TYPE value);								\

	DECL_FUNC(Bool, short)
	DECL_FUNC(Binary, short)
	DECL_FUNC(I1, short)
	DECL_FUNC(I2, short)
	DECL_FUNC(I4, long)
	DECL_FUNC(I8, long)
	DECL_FUNC(U1, short)
	DECL_FUNC(U2, long)
	DECL_FUNC(U4, double)
	DECL_FUNC(U8, double)
	DECL_FUNC(F4, float)
	DECL_FUNC(F8, double)

	short LoadSecsMsg(int* msgId, int* deviceId,
					  int* stream, int* func,
					  int* sysByte = 0, int* wbit = 0);
	short MakeSecsMsg(int* msgId, int deviceId,
					  int stream, int func,
					  int sysByte);
	short SetListCount(int msgId, int count);
	short SetAscii(int msgId, const QString& value);
	short SetJis8(int msgId, const QString& value);

	int ListCount(int msgId, int* nextItemFormat=0);
	QString Ascii(int msgId);
	QString Jis8(int msgId);
protected:
	void handleError(int errorCode, const char* context);
	WDispatchDriver* m_driver;
};

